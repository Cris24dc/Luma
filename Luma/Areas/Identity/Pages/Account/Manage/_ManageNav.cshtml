@inject SignInManager<User> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul id="acc-nav-ul">
    <li><a id="index" class="@ManageNavPages.ActivePageClass(ViewContext, "Index")" asp-page="./Index">Profile</a></li>
    <li><a id="email" class="@ManageNavPages.ActivePageClass(ViewContext, "Email")" asp-page="./Email">Email</a></li>
    <li><a id="change-password" class="@ManageNavPages.ActivePageClass(ViewContext, "ChangePassword")" asp-page="./ChangePassword">Password</a></li>
    <!-- @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li> -->
    <li><a id="personal-data" class="@ManageNavPages.ActivePageClass(ViewContext, "PersonalData")" asp-page="./PersonalData">Personal data</a></li>
    <form asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
        <button id="logout-button" type="submit">Logout</button>
    </form>
</ul>